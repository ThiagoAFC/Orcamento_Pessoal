name: .NET Core Build

on:
  push:
    branches:
  pull_request:
    branches:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0

    - name: Cache .NET dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.nuget/packages
          C:\Users\runneradmin\.nuget\packages
        key: ${{ runner.os }}-dotnet-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-dotnet-

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4.3.0
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: |
        dotnet add package Microsoft.CodeAnalysis.NetAnalyzers
        dotnet restore ./Tests/Sistema_Bancario.csproj --verbosity minimal

    - name: Configure Deprecated Code Detection
      run: |
        echo '<Project>' > Directory.Build.props
        echo '  <PropertyGroup>' >> Directory.Build.props
        echo '    <EnableNETAnalyzers>true</EnableNETAnalyzers>' >> Directory.Build.props
        echo '    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>' >> Directory.Build.props
        echo '    <WarningsAsErrors>CS0612;CS0618</WarningsAsErrors>' >> Directory.Build.props
        echo '  </PropertyGroup>' >> Directory.Build.props
        echo '</Project>' >> Directory.Build.props

    - name: Build project
      run: dotnet build --configuration Release --warnaserror

    - name: Run StyleCop Analyzers
      run: dotnet build --configuration Release --no-restore

    # Configurar o PMD
    - name: Download and Setup PMD
      run: |
        curl -L -o pmd-dist-7.8.0-bin.zip https://github.com/pmd/pmd/releases/download/pmd_releases%2F7.8.0/pmd-dist-7.8.0-bin.zip
        unzip pmd-dist-7.8.0-bin.zip -d pmd
        rm pmd-dist-7.8.0-bin.zip

    # Executar o CPD (detector de código duplicado)
    - name: Run CPD (Duplicate Code Detector)
      run: |
        echo "Executando o CPD (Detector de código duplicado)..."
        .\pmd-bin-7.8.0\bin\pmd cpd --minimum-tokens 40 --dir . --language cs --format text

    # Instalar o PlantUML
    - name: Install PlantUML
      run: |
        choco install plantuml

    # Gerar o diagrama UML com PlantUML
    - name: Generate UML Diagram with PlantUML
      run: |
        # Certifique-se de estar no diretório correto (diretório raiz do repositório)
        mkdir generated || exit 0

        # Criação manual de um arquivo PlantUML para teste
        echo @startuml > generated/program.png
        echo class BankAccount { >> generated/program.png
        echo "  - balance : decimal" >> generated/program.png
        echo "  + Deposit(amount : decimal) : void" >> generated/program.png
        echo } >> generated/program.png
        echo @enduml >> generated/program.png

        # Converte o .puml para PNG
        plantuml -tpng generated/program.png

        # Verificar arquivos gerados
        dir generated

    # Fazer upload do diagrama UML como artefato
    - name: Upload UML Diagram as Artifact
      uses: actions/upload-artifact@v4.6.0
      with:
        name: uml-diagram
        path: generated/diagram.png

    # Verificar o conteúdo do arquivo PlantUML
    - name: Check PlantUML File
      run: |
        echo "Conteúdo do arquivo PlantUML:"
        type generated/program.png

    - name: Publish code analysis results
      run: |
        dotnet build /p:RunCodeAnalysis=true
        # Publicar o resultado da análise de código (caso deseje)
        mkdir -p ${{ github.workspace }}/code-analysis-results
        mv *.xml ${{ github.workspace }}/code-analysis-results